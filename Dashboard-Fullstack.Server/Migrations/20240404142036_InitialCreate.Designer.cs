// <auto-generated />
using System;
using AngularAuthAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dashboard_Fullstack.Server.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240404142036_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AngularAuthAPI.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WidgetID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.ChartOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InteractionId")
                        .HasColumnType("int");

                    b.Property<int?>("LegendId")
                        .HasColumnType("int");

                    b.Property<int?>("NavigationId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int?>("StyleId")
                        .HasColumnType("int");

                    b.Property<int?>("SubtitleId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<int?>("TooltipId")
                        .HasColumnType("int");

                    b.Property<int?>("XAxisId")
                        .HasColumnType("int");

                    b.Property<int?>("YAxisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InteractionId");

                    b.HasIndex("LegendId");

                    b.HasIndex("NavigationId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("StyleId");

                    b.HasIndex("SubtitleId");

                    b.HasIndex("TitleId");

                    b.HasIndex("TooltipId");

                    b.HasIndex("XAxisId");

                    b.HasIndex("YAxisId");

                    b.ToTable("ChartOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Data", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionsId")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OptionsId");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.DataSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.ToTable("DataSeries");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<int>("ElementType")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<int?>("WidgetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("WidgetId");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.IAxisOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GridLinesEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("LabelsEnabled")
                        .HasColumnType("bit");

                    b.Property<double?>("Max")
                        .HasColumnType("float");

                    b.Property<double?>("Min")
                        .HasColumnType("float");

                    b.Property<bool?>("Opposite")
                        .HasColumnType("bit");

                    b.Property<bool?>("PlotLinesEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("Reversed")
                        .HasColumnType("bit");

                    b.Property<double?>("TickInterval")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("IAxisOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.IButtonOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IButtonOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.IInteractionOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Crosshair")
                        .HasColumnType("bit");

                    b.Property<bool?>("Pan")
                        .HasColumnType("bit");

                    b.Property<bool?>("Selection")
                        .HasColumnType("bit");

                    b.Property<bool?>("Trackball")
                        .HasColumnType("bit");

                    b.Property<bool?>("ZoomType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("IInteractionOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.ILegendOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Align")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<double?>("ItemDistance")
                        .HasColumnType("float");

                    b.Property<string>("ItemHoverStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Layout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Padding")
                        .HasColumnType("float");

                    b.Property<string>("SymbolHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolPadding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerticalAlign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ILegendOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.INavigationOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ButtonOptionsId")
                        .HasColumnType("int");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ButtonOptionsId");

                    b.ToTable("INavigationOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.IPlotLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DashStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IAxisOptionsId")
                        .HasColumnType("int");

                    b.Property<string>("LabelText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IAxisOptionsId");

                    b.ToTable("IPlotLine");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.ISeriesOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DashStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnableMouseTracking")
                        .HasColumnType("bit");

                    b.Property<double?>("LineWidth")
                        .HasColumnType("float");

                    b.Property<double?>("MarkerRadius")
                        .HasColumnType("float");

                    b.Property<string>("MarkerSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ISeriesOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.IStyleOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BorderRadius")
                        .HasColumnType("float");

                    b.Property<double?>("BorderWidth")
                        .HasColumnType("float");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IStyleOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.ISubtitleOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Align")
                        .HasColumnType("bit");

                    b.Property<bool?>("Floating")
                        .HasColumnType("bit");

                    b.Property<double?>("Margin")
                        .HasColumnType("float");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("WidthAdjust")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ISubtitleOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.ITitleOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Align")
                        .HasColumnType("bit");

                    b.Property<bool?>("Floating")
                        .HasColumnType("bit");

                    b.Property<double?>("Margin")
                        .HasColumnType("float");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("WidthAdjust")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ITitleOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.ITooltipOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Crosshairs")
                        .HasColumnType("bit");

                    b.Property<string>("FooterFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Shared")
                        .HasColumnType("bit");

                    b.Property<bool?>("Split")
                        .HasColumnType("bit");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValuePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueSuffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("XOffset")
                        .HasColumnType("float");

                    b.Property<double?>("YOffset")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ITooltipOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Row", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DashboardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.ChartOptions", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.IInteractionOptions", "Interaction")
                        .WithMany()
                        .HasForeignKey("InteractionId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.ILegendOptions", "Legend")
                        .WithMany()
                        .HasForeignKey("LegendId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.INavigationOptions", "Navigation")
                        .WithMany()
                        .HasForeignKey("NavigationId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.ISeriesOptions", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.IStyleOptions", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.ISubtitleOptions", "Subtitle")
                        .WithMany()
                        .HasForeignKey("SubtitleId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.ITitleOptions", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.ITooltipOptions", "Tooltip")
                        .WithMany()
                        .HasForeignKey("TooltipId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.IAxisOptions", "XAxis")
                        .WithMany()
                        .HasForeignKey("XAxisId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.IAxisOptions", "YAxis")
                        .WithMany()
                        .HasForeignKey("YAxisId");

                    b.Navigation("Interaction");

                    b.Navigation("Legend");

                    b.Navigation("Navigation");

                    b.Navigation("Series");

                    b.Navigation("Style");

                    b.Navigation("Subtitle");

                    b.Navigation("Title");

                    b.Navigation("Tooltip");

                    b.Navigation("XAxis");

                    b.Navigation("YAxis");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Data", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.ChartOptions", "Options")
                        .WithMany()
                        .HasForeignKey("OptionsId");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.DataSeries", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.Data", null)
                        .WithMany("Series")
                        .HasForeignKey("DataId");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Element", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.Data", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("Dashboard_Fullstack.Server.Models.Widget", null)
                        .WithMany("Elements")
                        .HasForeignKey("WidgetId");

                    b.Navigation("Data");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.INavigationOptions", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.IButtonOptions", "ButtonOptions")
                        .WithMany()
                        .HasForeignKey("ButtonOptionsId");

                    b.Navigation("ButtonOptions");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.IPlotLine", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.IAxisOptions", null)
                        .WithMany("PlotLines")
                        .HasForeignKey("IAxisOptionsId");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Row", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.Data", null)
                        .WithMany("Rows")
                        .HasForeignKey("DataId");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Widget", b =>
                {
                    b.HasOne("Dashboard_Fullstack.Server.Models.Dashboard", null)
                        .WithMany("Widgets")
                        .HasForeignKey("DashboardId");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Dashboard", b =>
                {
                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Data", b =>
                {
                    b.Navigation("Rows");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.IAxisOptions", b =>
                {
                    b.Navigation("PlotLines");
                });

            modelBuilder.Entity("Dashboard_Fullstack.Server.Models.Widget", b =>
                {
                    b.Navigation("Elements");
                });
#pragma warning restore 612, 618
        }
    }
}
